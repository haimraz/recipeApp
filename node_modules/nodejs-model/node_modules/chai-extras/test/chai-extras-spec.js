describe("Chai Extras", function(){
    var inspect;
    chai.use(function (chai, utils) {
        inspect = utils.inspect;

        chai.Assertion.addMethod('fail', function (message) {
            var obj = utils.flag(this, 'object');

            new chai.Assertion(obj).is.a('function');

            try {
                obj();
            } catch (err) {
                this.assert(
                    err instanceof chai.AssertionError
                    , 'expected #{this} to fail, but it threw ' + inspect(err));
                this.assert(
                    err.message === message
                    , 'expected #{this} to fail with ' + inspect(message) + ', but got ' + inspect(err.message));
                return;
            }

            this.assert(false, 'expected #{this} to fail');
        });
    });

    describe("atLeast", function(){
        var smallerNumber = 1;
        var largerNumber = 2;
        var someNumber = 3;
        it("passes when numbers are equal", function(){
            (someNumber).should.be.atLeast(someNumber);
        });
        it("fails negated when numbers are equal", function(){
            (function(){
                (someNumber).should.not.be.atLeast(someNumber);
            }).should.fail("expected 3 to be less than 3");
        });
        it("passes when the subject is at least value", function(){
            (largerNumber).should.be.atLeast(smallerNumber);
        });
        it("fails negated when the subject is at least value", function(){
            (function(){
                (largerNumber).should.not.be.atLeast(smallerNumber);
            }).should.fail("expected 2 to be less than 1");
        });
        it("fails when the subject is not at least value", function(){
            (function(){
                (smallerNumber).should.be.atLeast(largerNumber);
            }).should.fail("expected 1 to be at least 2");
        });
        it("passes negated when the subject is not greater", function(){
            (smallerNumber).should.not.be.atLeast(largerNumber);
        });
        it("fails when the subject is not a number", function(){
            (function(){
                "subject".should.be.atLeast(3);
            }).should.fail("expected " + inspect("subject") + " to be a number");
        });
    });
    describe("atMost", function(){
        var smallerNumber = 1;
        var largerNumber = 2;
        var someNumber = 3;
        it("passes when numbers are equal", function(){
            (someNumber).should.be.atMost(someNumber);
        });
        it("fails negated when numbers are equal", function(){
            (function(){
                (someNumber).should.not.be.atMost(someNumber);
            }).should.fail("expected 3 to be greater than 3");
        });
        it("fails when the subject is greater than value", function(){
            (function(){
                (largerNumber).should.be.atMost(smallerNumber);
            }).should.fail("expected 2 to be at most 1");
        });
        it("passes negated when the subject is at most value", function(){
            (largerNumber).should.not.be.atMost(smallerNumber);
        });
        it("passes when the subject is at most value", function(){
            (smallerNumber).should.be.atMost(largerNumber);
        });
        it("fails negated when the subject is greater", function(){
            (function(){
                (smallerNumber).should.not.be.atMost(largerNumber);
            }).should.fail("expected 1 to be greater than 2");
        });
        it("fails when the subject is not a number", function(){
            (function(){
                "subject".should.be.atMost(3);
            }).should.fail("expected " + inspect("subject") + " to be a number");
        });
    });
    describe('method', function(){
        var someObject = {someMethod: function(){}};
        it('passes when the object has the method', function(){
            someObject.should.have.method('someMethod');
        });
        it('fails when the object does not have the method', function(){
            (function(){
                (new Object()).should.have.method('someMethod');
            }).should.fail('expected {} to have method called someMethod');
        });
        it('passes negated when the object does not have the method', function(){
            "some string".should.not.have.method('someMethod');
        });
        it('fails negated when the object has the method', function(){
            (function(){
                someObject.should.not.have.method('someMethod');
            }).should.fail('expected { someMethod: [Function] } to not have method called undefined');
        });
        it('fails when value is not a string', function(){
            (function(){
                someObject.should.have.method(['someMethod']);
            }).should.fail('expected [ \'someMethod\' ] to be a string');
        });
    });
    describe('methods', function(){
        var someObject = {methodOne: function(){}, methodTwo: function(){}};
        it('fails when value is not an array', function(){
            (function(){
                someObject.should.have.methods('one two three');
            }).should.fail('expected \'one two three\' to be an array');
        });
        it('passes when object contains the method names', function(){
            someObject.should.have.methods(['methodOne', 'methodTwo']);
        });
        it('fails when the object contains only some of the method names', function(){
            (function(){
                someObject.should.have.methods(['methodOne', 'surpriseMe']);
            }).should.fail('expected { Object (methodOne, methodTwo) } to have method called surpriseMe');
        });
    });

});
