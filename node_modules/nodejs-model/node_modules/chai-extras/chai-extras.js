(function (chaiUtils){
  // Module systems magic dance.
  if (typeof require === "function" && typeof exports === "object" && typeof module === "object") {
    // NodeJS
    module.exports = chaiUtils;
  } else if (typeof define === "function" && define.amd) {
    // AMD
    define(function () {
      return chaiUtils;
    });
  } else {
    // Other environment (usually <script> tag): pass into global chai
    var global = (false || eval)("this");
    global.chai.use(chaiUtils);
  }

}(function (chai, utils){
  var inspect = utils.inspect,
      flag = utils.flag;

    chai.Assertion.addMethod('atLeast', function(number){
        var actual = flag(this, 'object');
        new chai.Assertion(actual).to.be.a("number");
        this.assert(
            actual >= number
          , 'expected #{this} to be at least #{exp}'
          , 'expected #{this} to be less than #{exp}' 
          , number
        );
    });
    chai.Assertion.addMethod('atMost', function(number){
        var actual = flag(this, 'object');
        new chai.Assertion(actual).to.be.a("number");
        this.assert(
            actual <= number
          , 'expected #{this} to be at most #{exp}'
          , 'expected #{this} to be greater than #{exp}' 
          , number
        );
    });
    chai.Assertion.addMethod('method', function(methodName){
        var actual = flag(this, 'object');
        new chai.Assertion(methodName).to.be.a('string');
        this.assert(
            (typeof actual[methodName] === 'function')
          , 'expected #{this} to have method called ' + methodName
          , 'expected #{this} to not have method called #{exp}'
        );
    });
    chai.Assertion.addMethod('methods', function(methodNames){
        var actual = flag(this, 'object');
        new chai.Assertion(methodNames).to.be.an('array');
        for (var i = 0; i < methodNames.length; i++){
            new chai.Assertion(actual).to.have.method(methodNames[i]);
        }
    });
}));
