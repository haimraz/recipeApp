{
  "name": "nodejs-model",
  "description": "A simple, minimalistic object model for nodejs",
  "version": "0.1.6",
  "keywords": [
    "model",
    "schema",
    "validations"
  ],
  "author": {
    "name": "Asaf Shakarchi",
    "email": "asaf000@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/asaf/nodejs-model"
  },
  "bugs": {
    "url": "https://github.com/asaf/nodejs-model/issues"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha test/test.coffee",
    "compile": "rm -rf ./compiled/* ; ./node_modules/coffee-script/bin/coffee -o compiled/ -c lib/"
  },
  "main": "module.js",
  "dependencies": {
    "validator": "~1.4.0",
    "coffee-script": "1.4.0",
    "q": "~0.9.6",
    "underscore": "~1.5.1",
    "stampit": "~0.5.1",
    "chai-extras": "~1.1.0",
    "underscore.string": "~2.3.3"
  },
  "devDependencies": {
    "mocha": "*",
    "chai": "*"
  },
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "readme": "[![Build Status](https://travis-ci.org/asaf/nodejs-model.png?branch=master)](https://travis-ci.org/asaf/nodejs-model)\n\n# nodejs-model\n\nOkay, so you have a node app backed with some kind of NoSQL schema-less DB such as CouchDB and it all works pretty well,\n\nBut hey, even though schema-less is very cool and produces fast results, for small apps it may make sense, but as application \ncode grows bigger and bigger, you will eventually end with low data integrity and things will start to become messy,\n\nSo this is what nodejs-model is for, it is a very minimal, extensible model structure for node, it doesn't dictate any \nDB requirements nor hook into it directly, it's just a plain javascript object with some enhanced capabilities for \nattributes accessors, validations, tagging and filtering.\n\nNote: If you are aware of Ruby AcitveObject Validations you will probably find some common parts with the \nvalidation capability of it, But _nodejs-model_ goes much further, read on :-)\n\n\n# Why use nodejs-model?\n\nIf one or more of the bullets below makes sense to you, then you should try nodejs-model.\n\n* Model attributes: A lightweight javascript model with simple accessors.\n* Attribute validations: define validation rules per defined attribute.\n* Accessibility via tags: Tag attributes with some labels, then allow retrieving/updating only attributes that matches some tags.\n* Events: Events are fired when objects are being created or properties are modified.\n* Converters: Simply hook converters into attributes, for example an encryptor converter may attach to the _password_ attribute of a _User_ model to encrypt the user's password immediately after it is set with new value.\n\n#Installation\n\nTo install nodejs-model, use [npm](http://github.com/isaacs/npm):\n\n```bash\n$ npm install nodejs-model --save\n```\n\n\n# Basic Usage\n\nThis is how it works:\n\nCreate a _model_ definition with some validation rules\n\n``` javascript\nvar model = require('nodejs-model');\n\n//create a new model definition _User_ and define _name_/_password_ attributes\nvar User = model(\"User\").attr('name', {\n  validations: {\n    presence: {\n      message: 'Name is required!'\n    }\n  }\n}).attr('password', {\n  validations: {\n    length: {\n      minimum: 5,\n      maximum: 20,\n      messages: {\n        tooShort: 'password is too short!',\n        tooLong: 'password is too long!'\n      }\n    }\n  },\n  //this tags the accessibility as _private_\n  tags: ['private']\n});\n\nvar u1 = User.create();\n//getters are generated automatically\nu1.name('foo');\nu1.password('password');\n\nconsole.log(u1.name());\n//prints _foo_\n\n//Invoke validations and wait for the validations to fulfill\nu1.validate(function() {\n  if u1.isValid {\n     //validated, perform business logic\n  } else {\n     //validation failed, dump validation errors to the console\n     console.log(p1.errors)\n  }\n});\n\n//get object as a plain object, ready for JSON\nconsole.log(u1.toJSON());\n//produces: { name: 'foo' }\n\n//now also with attributes that were tagged with 'private'\nconsole.log(u1.toJSON('private'));\n//produces: { name: 'foo' } { password: 'password' }\n```\n\n\nSimple as that, your model is enhanced with a validate() method, simply invoke it to validate the model object\nagainst the validation rules defined in the schema.\n\n\n# Updating Model Instance\n\nAssuming you have a simple model instance (`u1` as defined in the basic example above, you can update it with new data \nat some point after loading an object from DB / file / JSON / etc:\n\n\n``` javascript\nsomeObj = {\n  name: 'bar',\n  password: 'newpassword'\n};\n\nu1.update(someObj);\n\nconsole.log(u1.name());\n//prints bar\nconsole.log(u1.password());\n//NOTE: prints password\n```\n\nPay attention that password wasn't updated, this is because when invoking `update(object)` only public attributes (any\nattribute that its _tags_ metadata wasnt defined or defined as _['default']_ can be updated.\n\nWith this specific example, since _password_ is tagged with _private_, you can update by suppling the _private_ tag\nto the `update()` 2nd parameter as:\n\n``` javascript\nu1.update(someObj, 'private')\nconsole.log(u1.name());\n//prints bar\nconsole.log(u1.password());\n//NOTE: prints newpassword\n```\n\n\n# Validators\n\n## Presence\n\nThe _Presence_ ensure that an attribute value is not null or empty string, example:\n\n```javascript\nvar User = model(\"User\").attr('name', {\n  validations: {\n    presence: true\n  });\n```\n\n### Options\n\n* `true` - value will be required, default message is set.\n* `message` - string represents the error message if validator fails.\n\nExample with custom message:\n\n```javascript\nvalidations: {\n  presence: {\n    message: 'Name is required!'\n  }\n}\n```\n\n## Length\n\nValidates rules of the length of a property value.\n\n### Options\n\n* `is` keyword or `number` - An exact length\n* `array` - Will expand to `minimum` and `maximum`. First element is the lower bound, second element is the upper bound.\n* `allowBlank` - Validation is skipped if equal to `true` and value is empty\n* `minimum` - Minimum length of the value allowed\n* `maximum` - Maximum length of the value allowed\n\n### Messages\n  * `wrongLength` - any string represents the error message if `is`/`number` validation fails.\n  * `tooShort` - any string represents the error message if `minimum` validation fails.\n  * `tooLong` - any string represents the error message if `maximum` validation fails.\n\n```javascript\n// Examples of is, both are equal, exact 3 length match\nlength: 3\nlength: {is: 3}\n//same as above, but empty string is allowed\nlength: { is: 3, allowBlank: true } \n//min legnth: 2, max length: 4\nlength: [2, 4]\n//same as above with custom error messages\nlength: { minimum: 2, maximum: 4, messages { tooShort: 'min 3 length!', tooLong: 'max 5 length!' } }\n```\n\n## Format\n\nRegexp test validator\n\n### Options\n\n* `with` - the regular expression to test\n* `allowBlank` - Validation is skipped if equal to `true` and value is empty\n* `message` - any string represents the error message.\n\n```javascript\n// Examples\nformat: { with: /^\\d*$/, allowBlank: true, message: 'only digits are allowed, or empty string.'  }\n```\n\n# Tags\n\nnodejs-model supports tags per defined attribute, when new attribute is defined with no _tags_ it will be automatically\ntagged with the _default_ tag.\n\nMethods such as toJSON(tags_array) or `update(updatedObj, tags_array)` are accessbility aware when\nupdating or producing model instance output.\n\n\nYou can define tags per attribute by:\n\n``` javascript\nUser = model(\"User\").attr('name', {\n  tags: ['ui', 'registered']\n}).attr('password', {\n  tags: ['private']\n}).attr('age');\n\nu1 = User.create();\nu1.name('foo');\nu1.password('secret');\nu1.age(55);\n\nconsole.log(u1.toJSON());\n//prints { age: 55 }, this is because invoking toJSON(), it will only create an object with attributes defined\nas public.\n\nconsole.log(u1.toJSON(['ui', 'private']));\n//prints { name: 'foo', password: 'secret' }\n\n//* means any property with any tags\nconsole.log(u1.toJSON('*'));\n//prints { name: 'foo', password: 'secret', age: 55 }\n```\n\nUpdate mehtod `someInstance.update(newObj, tags)` is also _tags-aware_ as with `someInstance.toJSON(tags)`.\n\n\n#Initializing Model Instances\n\nIt is possible to initialize a model instance by suppliying an `init` method on the Model level,\n\nHere is an example how to initialize a creation date attribute for a model:\n\n```javascript\nvar P = model('Person').attr('name').attr('creation_date');\n\n//will be invoked just after a model is instantiated by P.create()\nP.init = function(instance) {\n  instance.creationDate(d);\n};\n\np1 = P.create();\n\nconsole.log(p1.creationDate())\n//prints a date\n```\n\n#More Info\nCheck wiki pages:\n\n* [Custom Validator per Model](https://github.com/asaf/nodejs-model/wiki/Custom-Validator-per-Model)\n* [Conditional Validator](https://github.com/asaf/nodejs-model/wiki/Conditional-Validator)\n\n\n#Contributers\n\n* [amitpaz](https://github.com/amitpaz) - Co author, design, tests, etc.\n\n#Contributions\n\nYou can contribute in few ways:\n\n* Just use the module, this is the open source way, right? more usages, more stable and robust the model will be.\n* Star it! :) - if you'r happy with it and find it useful.\n* Code, if you are a coder and would like to contribute code then visit the Development page.\n\n#License\n\nSee _LICENSE_ file.\n",
  "readmeFilename": "README.md",
  "_id": "nodejs-model@0.1.6",
  "dist": {
    "shasum": "30efc4e03ef088e26f951d862a09c95b3d862496",
    "tarball": "http://registry.npmjs.org/nodejs-model/-/nodejs-model-0.1.6.tgz"
  },
  "_from": "nodejs-model@",
  "_npmVersion": "1.2.25",
  "_npmUser": {
    "name": "asaf",
    "email": "asaf000@gmail.com"
  },
  "maintainers": [
    {
      "name": "asaf",
      "email": "asaf000@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "30efc4e03ef088e26f951d862a09c95b3d862496",
  "_resolved": "https://registry.npmjs.org/nodejs-model/-/nodejs-model-0.1.6.tgz",
  "homepage": "https://github.com/asaf/nodejs-model"
}
